// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: booking.sql

package db

import (
	"context"
	"time"
)

const createBookingRequest = `-- name: CreateBookingRequest :one
INSERT INTO requests(
  user_id,
  type,
  prefered_nurse,
  start_date,
  end_date,
  location
)
VALUES($1,$2,$3,$4,$5,Point($6,$7))
RETURNING id, user_id, type, prefered_nurse, start_date, end_date, location, created_at
`

type CreateBookingRequestParams struct {
	UserID        int64     `json:"user_id"`
	Type          string    `json:"type"`
	PreferedNurse *int64    `json:"prefered_nurse"`
	StartDate     time.Time `json:"start_date"`
	EndDate       time.Time `json:"end_date"`
	Point         float64   `json:"point"`
	Point_2       float64   `json:"point_2"`
}

func (q *Queries) CreateBookingRequest(ctx context.Context, arg CreateBookingRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, createBookingRequest,
		arg.UserID,
		arg.Type,
		arg.PreferedNurse,
		arg.StartDate,
		arg.EndDate,
		arg.Point,
		arg.Point_2,
	)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.PreferedNurse,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookingByID = `-- name: DeleteBookingByID :exec
DELETE FROM requests
WHERE user_id=$1 AND id=$2
`

type DeleteBookingByIDParams struct {
	UserID int64 `json:"user_id"`
	ID     int64 `json:"id"`
}

func (q *Queries) DeleteBookingByID(ctx context.Context, arg DeleteBookingByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteBookingByID, arg.UserID, arg.ID)
	return err
}

const getAllBookingsByAdmin = `-- name: GetAllBookingsByAdmin :many
SELECT id, user_id, type, prefered_nurse, start_date, end_date, location, created_at FROM requests
`

func (q *Queries) GetAllBookingsByAdmin(ctx context.Context) ([]Request, error) {
	rows, err := q.db.QueryContext(ctx, getAllBookingsByAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Request{}
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.PreferedNurse,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingByID = `-- name: GetBookingByID :one
SELECT id, user_id, type, prefered_nurse, start_date, end_date, location, created_at FROM requests
WHERE user_id=$1 AND id=$2
`

type GetBookingByIDParams struct {
	UserID int64 `json:"user_id"`
	ID     int64 `json:"id"`
}

func (q *Queries) GetBookingByID(ctx context.Context, arg GetBookingByIDParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, getBookingByID, arg.UserID, arg.ID)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.PreferedNurse,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}

const getBookingsByAdminByID = `-- name: GetBookingsByAdminByID :one
SELECT id, user_id, type, prefered_nurse, start_date, end_date, location, created_at FROM requests
WHERE id=$1
`

func (q *Queries) GetBookingsByAdminByID(ctx context.Context, id int64) (Request, error) {
	row := q.db.QueryRowContext(ctx, getBookingsByAdminByID, id)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.PreferedNurse,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}

const listUserBookingReqs = `-- name: ListUserBookingReqs :many
SELECT id, user_id, type, prefered_nurse, start_date, end_date, location, created_at FROM requests
WHERE user_id=$1
LIMIT $2
OFFSET $3
`

type ListUserBookingReqsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserBookingReqs(ctx context.Context, arg ListUserBookingReqsParams) ([]Request, error) {
	rows, err := q.db.QueryContext(ctx, listUserBookingReqs, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Request{}
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.PreferedNurse,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
