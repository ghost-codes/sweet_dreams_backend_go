// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: approval.sql

package db

import (
	"context"
)

const adminGetUserApprovals = `-- name: AdminGetUserApprovals :many
SELECT id, request_id, user_id, assigned_nurse, approved_by, status, notes, updated_at, created_at FROM approvals
LIMIT $1
OFFSET $2
`

type AdminGetUserApprovalsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) AdminGetUserApprovals(ctx context.Context, arg AdminGetUserApprovalsParams) ([]Approval, error) {
	rows, err := q.db.QueryContext(ctx, adminGetUserApprovals, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Approval{}
	for rows.Next() {
		var i Approval
		if err := rows.Scan(
			&i.ID,
			&i.RequestID,
			&i.UserID,
			&i.AssignedNurse,
			&i.ApprovedBy,
			&i.Status,
			&i.Notes,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createApproval = `-- name: CreateApproval :one
INSERT INTO approvals(
  request_id,
  assigned_nurse,
  user_id,
  approved_by,
  status,
  notes
) VALUES( $1,$2,$3,$4,$5,$6)
RETURNING id, request_id, user_id, assigned_nurse, approved_by, status, notes, updated_at, created_at
`

type CreateApprovalParams struct {
	RequestID     int64   `json:"request_id"`
	AssignedNurse int64   `json:"assigned_nurse"`
	UserID        int64   `json:"user_id"`
	ApprovedBy    int64   `json:"approved_by"`
	Status        string  `json:"status"`
	Notes         *string `json:"notes"`
}

func (q *Queries) CreateApproval(ctx context.Context, arg CreateApprovalParams) (Approval, error) {
	row := q.db.QueryRowContext(ctx, createApproval,
		arg.RequestID,
		arg.AssignedNurse,
		arg.UserID,
		arg.ApprovedBy,
		arg.Status,
		arg.Notes,
	)
	var i Approval
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.UserID,
		&i.AssignedNurse,
		&i.ApprovedBy,
		&i.Status,
		&i.Notes,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteApprovals = `-- name: DeleteApprovals :exec
DELETE FROM approvals
WHERE id=$1
`

func (q *Queries) DeleteApprovals(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteApprovals, id)
	return err
}

const getUserApprovals = `-- name: GetUserApprovals :many
SELECT id, request_id, user_id, assigned_nurse, approved_by, status, notes, updated_at, created_at FROM approvals
WHERE user_id=$1
LIMIT $2
OFFSET $3
`

type GetUserApprovalsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUserApprovals(ctx context.Context, arg GetUserApprovalsParams) ([]Approval, error) {
	rows, err := q.db.QueryContext(ctx, getUserApprovals, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Approval{}
	for rows.Next() {
		var i Approval
		if err := rows.Scan(
			&i.ID,
			&i.RequestID,
			&i.UserID,
			&i.AssignedNurse,
			&i.ApprovedBy,
			&i.Status,
			&i.Notes,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
