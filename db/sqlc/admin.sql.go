// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: admin.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins(
  username,
  full_name,
  email,
  hashed_password,
  is_super
)VALUES(
    $1,$2,$3,$4,false
) RETURNING id, username, full_name, email, hashed_password, is_super, created_at
`

type CreateAdminParams struct {
	Username       string `json:"username"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.HashedPassword,
	)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.IsSuper,
		&i.CreatedAt,
	)
	return i, err
}

const getAdmin = `-- name: GetAdmin :one
SELECT id, username, full_name, email, hashed_password, is_super, created_at FROM admins
WHERE username=$1 OR email=$1
`

func (q *Queries) GetAdmin(ctx context.Context, username string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, username)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.IsSuper,
		&i.CreatedAt,
	)
	return i, err
}
