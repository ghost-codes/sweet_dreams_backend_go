// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: verify_email.sql

package db

import (
	"context"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO verify_emails(
  username,
  email ,
  secret_key
) VALUES (
  $1, $2,$3
)
RETURNING id, username, email, secret_key, is_used, expired_at, created_at
`

type CreateVerifyEmailParams struct {
	Username  *string `json:"username"`
	Email     string  `json:"email"`
	SecretKey string  `json:"secret_key"`
}

func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRowContext(ctx, createVerifyEmail, arg.Username, arg.Email, arg.SecretKey)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretKey,
		&i.IsUsed,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getVerifyEmail = `-- name: GetVerifyEmail :one
SELECT id, username, email, secret_key, is_used, expired_at, created_at FROM verify_emails
WHERE id=$1
`

func (q *Queries) GetVerifyEmail(ctx context.Context, id int64) (VerifyEmail, error) {
	row := q.db.QueryRowContext(ctx, getVerifyEmail, id)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretKey,
		&i.IsUsed,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :one
UPDATE verify_emails
SET is_used=true
WHERE id=$1
RETURNING id, username, email, secret_key, is_used, expired_at, created_at
`

func (q *Queries) UpdateVerifyEmail(ctx context.Context, id int64) (VerifyEmail, error) {
	row := q.db.QueryRowContext(ctx, updateVerifyEmail, id)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretKey,
		&i.IsUsed,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
