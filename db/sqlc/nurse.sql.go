// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: nurse.sql

package db

import (
	"context"
)

const createNurse = `-- name: CreateNurse :one
INSERT INTO nurses(
  full_name,
  email,
  contact,
  profile_picture
)
VALUES($1,$2,$3,$4)
RETURNING id, full_name, email, contact, profile_picture, created_at
`

type CreateNurseParams struct {
	FullName       string  `json:"full_name"`
	Email          string  `json:"email"`
	Contact        string  `json:"contact"`
	ProfilePicture *string `json:"profile_picture"`
}

func (q *Queries) CreateNurse(ctx context.Context, arg CreateNurseParams) (Nurse, error) {
	row := q.db.QueryRowContext(ctx, createNurse,
		arg.FullName,
		arg.Email,
		arg.Contact,
		arg.ProfilePicture,
	)
	var i Nurse
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Contact,
		&i.ProfilePicture,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNurse = `-- name: DeleteNurse :exec
DELETE FROM nurses
WHERE id=$1
`

func (q *Queries) DeleteNurse(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNurse, id)
	return err
}

const getNurse = `-- name: GetNurse :one
SELECT id, full_name, email, contact, profile_picture, created_at FROM nurses
WHERE id=$1
`

func (q *Queries) GetNurse(ctx context.Context, id int64) (Nurse, error) {
	row := q.db.QueryRowContext(ctx, getNurse, id)
	var i Nurse
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Contact,
		&i.ProfilePicture,
		&i.CreatedAt,
	)
	return i, err
}

const listNurses = `-- name: ListNurses :many
SELECT id, full_name, email, contact, profile_picture, created_at FROM nurses
ORDER BY full_name
LIMIT $1
OFFSET $2
`

type ListNursesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListNurses(ctx context.Context, arg ListNursesParams) ([]Nurse, error) {
	rows, err := q.db.QueryContext(ctx, listNurses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Nurse{}
	for rows.Next() {
		var i Nurse
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.Contact,
			&i.ProfilePicture,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
